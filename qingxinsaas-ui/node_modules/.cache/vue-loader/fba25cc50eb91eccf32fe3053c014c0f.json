{"remainingRequest":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\panel\\executionListener.vue?vue&type=style&index=0&id=594ffe81&lang=scss","dependencies":[{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\panel\\executionListener.vue","mtime":1733705220396},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAnLi4vc3R5bGUvcHJvY2Vzcy1wYW5lbCc7DQouZmxvdy1jb250YWluZXJzICAuZWwtYmFkZ2VfX2NvbnRlbnQuaXMtZml4ZWQgew0KICB0b3A6IDE4cHg7DQp9DQouZGlhbG9nLWZvb3RlciBidXR0b246Zmlyc3QtY2hpbGQgew0KICBtYXJnaW4tcmlnaHQ6IDEwcHg7DQp9DQo="},{"version":3,"sources":["executionListener.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgdA;AACA;AACA;AACA;AACA;AACA;AACA","file":"executionListener.vue","sourceRoot":"src/components/Process/panel","sourcesContent":["<template>\r\n  <div class=\"panel-tab__content\">\r\n    <el-table :data=\"elementListenersList\" size=\"mini\" border>\r\n      <el-table-column label=\"序号\" width=\"50px\" type=\"index\" />\r\n      <el-table-column label=\"类型\" width=\"60px\" prop=\"event\" />\r\n      <el-table-column label=\"监听类型\" width=\"80px\" show-overflow-tooltip :formatter=\"row => listenerTypeObject[row.listenerType]\" />\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"mini\" type=\"primary\" @click=\"openListenerForm(scope.row, scope.$index)\">编辑</el-button>\r\n          <el-divider direction=\"vertical\" />\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"removeListener(scope.row, scope.$index)\">移除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <div class=\"element-drawer__button_save\">\r\n      <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"small\" @click=\"listenerSystemVisible = true\">内置监听器</el-button>\r\n      <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"small\" @click=\"openListenerForm(null)\" >自定义监听器</el-button>\r\n    </div>\r\n\r\n    <!-- 监听器 编辑/创建 部分 -->\r\n    <el-drawer :visible.sync=\"listenerFormModelVisible\" title=\"执行监听器\" size=\"480px\" append-to-body destroy-on-close>\r\n      <el-form :model=\"listenerForm\" size=\"small\" label-width=\"96px\" ref=\"listenerFormRef\" @submit.native.prevent>\r\n        <el-form-item label=\"事件类型\" prop=\"event\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerForm.event\">\r\n            <el-option label=\"start\" value=\"start\" />\r\n            <el-option label=\"end\" value=\"end\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"监听器类型\" prop=\"listenerType\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerForm.listenerType\">\r\n            <el-option v-for=\"i in Object.keys(listenerTypeObject)\" :key=\"i\" :label=\"listenerTypeObject[i]\" :value=\"i\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item\r\n            v-if=\"listenerForm.listenerType === 'classListener'\"\r\n            label=\"Java类\"\r\n            prop=\"class\"\r\n            key=\"listener-class\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.class\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n            v-if=\"listenerForm.listenerType === 'expressionListener'\"\r\n            label=\"表达式\"\r\n            prop=\"expression\"\r\n            key=\"listener-expression\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.expression\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n            v-if=\"listenerForm.listenerType === 'delegateExpressionListener'\"\r\n            label=\"代理表达式\"\r\n            prop=\"delegateExpression\"\r\n            key=\"listener-delegate\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerForm.delegateExpression\" clearable />\r\n        </el-form-item>\r\n        <template v-if=\"listenerForm.listenerType === 'scriptListener'\">\r\n          <el-form-item\r\n              label=\"脚本格式\"\r\n              prop=\"scriptFormat\"\r\n              key=\"listener-script-format\"\r\n              :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写脚本格式' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.scriptFormat\" clearable />\r\n          </el-form-item>\r\n          <el-form-item\r\n              label=\"脚本类型\"\r\n              prop=\"scriptType\"\r\n              key=\"listener-script-type\"\r\n              :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请选择脚本类型' }\"\r\n          >\r\n            <el-select v-model=\"listenerForm.scriptType\">\r\n              <el-option label=\"内联脚本\" value=\"inlineScript\" />\r\n              <el-option label=\"外部脚本\" value=\"externalScript\" />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item\r\n              v-if=\"listenerForm.scriptType === 'inlineScript'\"\r\n              label=\"脚本内容\"\r\n              prop=\"value\"\r\n              key=\"listener-script\"\r\n              :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写脚本内容' }\"\r\n          >\r\n            <el-input v-model=\"this.listenerForm\" clearable />\r\n          </el-form-item>\r\n          <el-form-item\r\n              v-if=\"listenerForm.scriptType === 'externalScript'\"\r\n              label=\"资源地址\"\r\n              prop=\"resource\"\r\n              key=\"listener-resource\"\r\n              :rules=\"{ required: true, trigger: ['blur', 'change'], message: '请填写资源地址' }\"\r\n          >\r\n            <el-input v-model=\"listenerForm.resource\" clearable />\r\n          </el-form-item>\r\n        </template>\r\n      </el-form>\r\n      <el-divider />\r\n      <p class=\"listener-filed__title\">\r\n        <span><el-icon><BellFilled /></el-icon>注入字段：</span>\r\n        <el-button type=\"primary\" size=\"mini\" @click=\"openListenerFieldForm(null)\">添加字段</el-button>\r\n      </p>\r\n      <el-table :data=\"fieldsListOfListener\" size=\"mini\" max-height=\"240\" border fit style=\"flex: none\">\r\n        <el-table-column label=\"序号\" width=\"50px\" type=\"index\" />\r\n        <el-table-column label=\"字段名称\" width=\"80px\" prop=\"name\" />\r\n        <el-table-column label=\"字段类型\" width=\"80px\" show-overflow-tooltip :formatter=\"row => fieldTypeObject[row.fieldType]\" />\r\n        <el-table-column label=\"值内容\" width=\"80px\" show-overflow-tooltip :formatter=\"row => row.string || row.expression\" />\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button size=\"mini\" type=\"primary\" @click=\"openListenerFieldForm(scope.row, scope.$index)\">编辑</el-button>\r\n            <el-divider direction=\"vertical\" />\r\n            <el-button size=\"mini\" type=\"danger\" @click=\"removeListenerField(scope.row, scope.$index)\">移除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <div class=\"element-drawer__button\">\r\n        <el-button size=\"small\" @click=\"listenerFormModelVisible = false\">取 消</el-button>\r\n        <el-button size=\"small\" type=\"primary\" @click=\"saveListenerConfig\">保 存</el-button>\r\n      </div>\r\n    </el-drawer>\r\n\r\n    <!-- 注入西段 编辑/创建 部分 -->\r\n    <el-dialog title=\"字段配置\" :visible.sync=\"listenerFieldFormModelVisible\" width=\"600px\" append-to-body destroy-on-close>\r\n      <el-form :model=\"listenerFieldForm\" label-width=\"96px\" ref=\"listenerFieldFormRef\" style=\"height: 136px\" @submit.native.prevent>\r\n        <el-form-item label=\"字段名称：\" prop=\"name\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-input v-model=\"listenerFieldForm.name\" clearable />\r\n        </el-form-item>\r\n        <el-form-item label=\"字段类型：\" prop=\"fieldType\" :rules=\"{ required: true, trigger: ['blur', 'change'] }\">\r\n          <el-select v-model=\"listenerFieldForm.fieldType\">\r\n            <el-option v-for=\"i in Object.keys(fieldTypeObject)\" :key=\"i\" :label=\"fieldTypeObject[i]\" :value=\"i\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item\r\n            v-if=\"listenerFieldForm.fieldType === 'string'\"\r\n            label=\"字段值：\"\r\n            prop=\"string\"\r\n            key=\"field-string\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerFieldForm.string\" clearable />\r\n        </el-form-item>\r\n        <el-form-item\r\n            v-if=\"listenerFieldForm.fieldType === 'expression'\"\r\n            label=\"表达式：\"\r\n            prop=\"expression\"\r\n            key=\"field-expression\"\r\n            :rules=\"{ required: true, trigger: ['blur', 'change'] }\"\r\n        >\r\n          <el-input v-model=\"listenerFieldForm.expression\" clearable />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button size=\"small\" @click=\"listenerFieldFormModelVisible= false\">取 消</el-button>\r\n          <el-button size=\"small\" type=\"primary\" @click=\"saveListenerFiled\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n\r\n    <!-- 内置监听器 -->\r\n    <el-drawer :visible.sync=\"listenerSystemVisible\" title=\"执行监听器\" size=\"580px\" append-to-body destroy-on-close>\r\n      <el-table v-loading=\"loading\" :data=\"listenerList\" @selection-change=\"handleSelectionChange\">\r\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\" />\r\n        <el-table-column label=\"名称\" align=\"center\" prop=\"name\" />\r\n        <el-table-column label=\"类型\" align=\"center\" prop=\"eventType\"/>\r\n        <el-table-column label=\"监听类型\" align=\"center\" prop=\"valueType\">\r\n          <template slot-scope=\"scope\">\r\n            <dict-tag :options=\"dict.type.sys_listener_value_type\" :value=\"scope.row.valueType\"/>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"执行内容\" align=\"center\" prop=\"value\" :show-overflow-tooltip=\"true\"/>\r\n      </el-table>\r\n\r\n      <pagination\r\n          v-show=\"total>0\"\r\n          :total=\"total\"\r\n          layout=\"prev, pager, next\"\r\n          :page.sync=\"queryParams.pageNum\"\r\n          :limit.sync=\"queryParams.pageSize\"\r\n          @pagination=\"getList\"\r\n      />\r\n\r\n      <div class=\"element-drawer__button\">\r\n        <el-button size=\"small\" @click=\"listenerSystemVisible = false\">取 消</el-button>\r\n        <el-button size=\"small\" type=\"primary\" :disabled=\"listenerSystemChecked\" @click=\"saveSystemListener\">保 存</el-button>\r\n      </div>\r\n    </el-drawer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { listListener } from \"@/api/flowable/listener\";\r\nimport {\r\n  changeListenerObject,\r\n  createListenerObject,\r\n  createSystemListenerObject,\r\n  updateElementExtensions\r\n} from \"../common/bpmnUtils\";\r\n\r\nimport {StrUtil} from \"@/utils/StrUtil\";\r\n\r\nexport default {\r\n  name: \"ExecutionListener\",\r\n  // 内置监听器相关信息\r\n  dicts: ['sys_listener_value_type', 'sys_listener_event_type'],\r\n  /** 组件传值  */\r\n  props : {\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      elementListenersList: [], // 监听器列表\r\n      listenerForm: {},// 监听器详情表单\r\n      listenerFormModelVisible: false, // 监听器 编辑 侧边栏显示状态\r\n      fieldsListOfListener: [],\r\n      bpmnElementListeners: [],\r\n      otherExtensionList: [],\r\n      listenerFieldForm: {}, // 监听器 注入字段 详情表单\r\n      listenerFieldFormModelVisible: false, // 监听器 注入字段表单弹窗 显示状态\r\n      editingListenerIndex: -1, // 监听器所在下标，-1 为新增\r\n      editingListenerFieldIndex: -1, // 字段所在下标，-1 为新增\r\n\r\n      listenerList: [],\r\n      checkedListenerData: [],\r\n      listenerSystemVisible: false,\r\n      listenerSystemChecked: true,\r\n      loading: true,\r\n      total: 0,\r\n      listenerTypeObject: {\r\n        classListener: \"Java 类\",\r\n        expressionListener: \"表达式\",\r\n        delegateExpressionListener: \"代理表达式\",\r\n        scriptListener: \"脚本\"\r\n      },\r\n      eventType: {\r\n        create: \"创建\",\r\n        assignment: \"指派\",\r\n        complete: \"完成\",\r\n        delete: \"删除\",\r\n        update: \"更新\",\r\n        timeout: \"超时\"\r\n      },\r\n      fieldTypeObject: {\r\n        string: \"字符串\",\r\n        expression: \"表达式\"\r\n      },\r\n      queryParams: {\r\n        pageNum: 1,\r\n        pageSize: 10,\r\n        type: 2,\r\n      },\r\n    }\r\n  },\r\n\r\n  /** 传值监听 */\r\n  watch: {\r\n    id: {\r\n      handler(newVal) {\r\n        if (StrUtil.isNotBlank(newVal)) {\r\n          this.resetListenersList();\r\n        }\r\n      },\r\n      immediate: true, // 立即生效\r\n    },\r\n  },\r\n  created() {\r\n    this.getList();\r\n\r\n  },\r\n  methods: {\r\n    resetListenersList() {\r\n      this.bpmnElementListeners =\r\n        this.modelerStore.element.businessObject?.extensionElements?.values?.filter(ex => ex.$type === `flowable:ExecutionListener`) ?? [];\r\n      this.elementListenersList = this.bpmnElementListeners.map(listener => this.initListenerType(listener));\r\n      this.$emit('getExecutionListenerCount', this.elementListenersList.length)\r\n    },\r\n\r\n    // 打开 监听器详情 侧边栏\r\n    openListenerForm(listener, index) {\r\n      if (listener) {\r\n        this.listenerForm = this.initListenerForm(listener);\r\n        this.editingListenerIndex = index;\r\n      } else {\r\n        this.listenerForm = {};\r\n        this.editingListenerIndex = -1; // 标记为新增\r\n      }\r\n      if (listener && listener.fields) {\r\n        this.fieldsListOfListener = listener.fields.map(field => ({\r\n          ...field,\r\n          fieldType: field.string ? \"string\" : \"expression\"\r\n        }));\r\n      } else {\r\n        this.fieldsListOfListener = [];\r\n        this.$set(this.listenerForm, \"fields\", []);\r\n      }\r\n      // 打开侧边栏并清楚验证状态\r\n      this.listenerFormModelVisible = true;\r\n      this.$nextTick(() => {\r\n        if (this.$refs[\"listenerFormRef\"]) this.$refs[\"listenerFormRef\"].clearValidate();\r\n      });\r\n    },\r\n\r\n    // 打开监听器字段编辑弹窗\r\n    openListenerFieldForm(field, index) {\r\n      this.listenerFieldForm = field ? JSON.parse(JSON.stringify(field)) : {};\r\n      this.editingListenerFieldIndex = field ? index : -1;\r\n      this.listenerFieldFormModelVisible = true;\r\n      this.$nextTick(() => {\r\n        if (this.$refs[\"listenerFieldFormRef\"]) this.$refs[\"listenerFieldFormRef\"].clearValidate();\r\n      });\r\n    },\r\n\r\n    // 保存监听器注入字段\r\n    async saveListenerFiled() {\r\n      let validateStatus = await this.$refs[\"listenerFieldFormRef\"].validate();\r\n      if (!validateStatus) return; // 验证不通过直接返回\r\n      if (this.editingListenerFieldIndex === -1) {\r\n        this.fieldsListOfListener.push(this.listenerFieldForm);\r\n        this.listenerForm.fields.push(this.listenerFieldForm);\r\n      } else {\r\n        this.fieldsListOfListener.splice(this.editingListenerFieldIndex, 1, this.listenerFieldForm);\r\n        this.listenerForm.fields.splice(this.editingListenerFieldIndex, 1, this.listenerFieldForm);\r\n      }\r\n      this.listenerFieldFormModelVisible = false;\r\n      this.$nextTick(() => (this.listenerFieldForm = {}));\r\n    },\r\n\r\n    // 移除监听器字段\r\n    removeListenerField(field, index) {\r\n      this.$confirm(\"确认移除该字段吗？\", \"提示\", {\r\n        confirmButtonText: \"确 认\",\r\n        cancelButtonText: \"取 消\"\r\n      }).then(() => {\r\n        this.fieldsListOfListener.splice(index, 1);\r\n        this.listenerForm.fields.splice(index, 1);\r\n      }).catch(() => console.info(\"操作取消\"));\r\n    },\r\n\r\n    // 移除监听器\r\n    removeListener(listener, index) {\r\n      this.$confirm(\"确认移除该监听器吗？\", \"提示\", {\r\n        confirmButtonText: \"确 认\",\r\n        cancelButtonText: \"取 消\"\r\n      }).then(() => {\r\n        this.bpmnElementListeners.splice(index, 1);\r\n        this.elementListenersList.splice(index, 1);\r\n        updateElementExtensions(this.modelerStore.moddle, this.modelerStore.modeling, this.modelerStore.element, this.otherExtensionList.concat(this.bpmnElementListeners));\r\n        this.$emit('getExecutionListenerCount', this.elementListenersList.length)\r\n      }).catch((r) => console.info(r, \"操作取消\"));\r\n    },\r\n\r\n    // 保存监听器配置\r\n    async saveListenerConfig() {\r\n      let validateStatus = await this.$refs[\"listenerFormRef\"].validate();\r\n      if (!validateStatus) return; // 验证不通过直接返回\r\n      const listenerObject = createListenerObject(this.modelerStore.moddle, this.listenerForm, false, \"flowable\");\r\n      if (this.editingListenerIndex === -1) {\r\n        this.bpmnElementListeners.push(listenerObject);\r\n        this.elementListenersList.push(this.listenerForm);\r\n      } else {\r\n        this.bpmnElementListeners.splice(this.editingListenerIndex, 1, listenerObject);\r\n        this.elementListenersList.splice(this.editingListenerIndex, 1, this.listenerForm);\r\n      }\r\n      // 保存其他配置\r\n      this.otherExtensionList = this.modelerStore.element.businessObject?.extensionElements?.values?.filter(ex => ex.$type !== `flowable:ExecutionListener`) ?? [];\r\n      updateElementExtensions(this.modelerStore.moddle, this.modelerStore.modeling, this.modelerStore.element, this.otherExtensionList.concat(this.bpmnElementListeners));\r\n      this.$emit('getExecutionListenerCount', this.elementListenersList.length)\r\n      // 4. 隐藏侧边栏\r\n      this.listenerFormModelVisible = false;\r\n      this.listenerForm = {};\r\n    },\r\n\r\n    initListenerType(listener) {\r\n      let listenerType;\r\n      if (listener.class) listenerType = \"classListener\";\r\n      if (listener.expression) listenerType = \"expressionListener\";\r\n      if (listener.delegateExpression) listenerType = \"delegateExpressionListener\";\r\n      if (listener.script) listenerType = \"scriptListener\";\r\n      return {\r\n        ...JSON.parse(JSON.stringify(listener)),\r\n        ...(listener.script ?? {}),\r\n        listenerType: listenerType\r\n      };\r\n    },\r\n\r\n    // 初始化表单数据\r\n    initListenerForm(listener) {\r\n      let self = {\r\n        ...listener\r\n      };\r\n      if (listener.script) {\r\n        self = {\r\n          ...listener,\r\n          ...listener.script,\r\n          scriptType: listener.script.resource ? \"externalScript\" : \"inlineScript\"\r\n        };\r\n      }\r\n      if (listener.event === \"timeout\" && listener.eventDefinitions) {\r\n        if (listener.eventDefinitions.length) {\r\n          let k = \"\";\r\n          for (let key in listener.eventDefinitions[0]) {\r\n            console.log(listener.eventDefinitions, key);\r\n            if (key.indexOf(\"time\") !== -1) {\r\n              k = key;\r\n              self.eventDefinitionType = key.replace(\"time\", \"\").toLowerCase();\r\n            }\r\n          }\r\n          console.log(k);\r\n          self.eventTimeDefinitions = listener.eventDefinitions[0][k].body;\r\n        }\r\n      }\r\n      return self;\r\n    },\r\n\r\n\r\n    /** 查询流程达式列表 */\r\n    getList() {\r\n      this.loading = true;\r\n      listListener(this.queryParams).then(response => {\r\n        this.listenerList = response.rows;\r\n        this.total = response.total;\r\n        this.loading = false;\r\n      });\r\n    },\r\n\r\n    // 多选框选中数据\r\n    handleSelectionChange(selection) {\r\n      // ids.value = selection.map(item => item.id);\r\n      // TODO 应该使用 push?\r\n      this.checkedListenerData = selection;\r\n      this.listenerSystemChecked = selection.length !== 1;\r\n    },\r\n\r\n    // 保存内置监听器\r\n    saveSystemListener() {\r\n      if (this.checkedListenerData.length > 0) {\r\n        this.checkedListenerData.forEach(value => {\r\n          // 保存其他配置\r\n          const listenerObject = createSystemListenerObject(this.modelerStore.moddle, value, false, \"flowable\");\r\n          this.bpmnElementListeners.push(listenerObject);\r\n          this.elementListenersList.push(changeListenerObject(value));\r\n          this.otherExtensionList = this.modelerStore.element.businessObject?.extensionElements?.values?.filter(ex => ex.$type !== `flowable:TaskListener`) ?? [];\r\n          updateElementExtensions(this.modelerStore.moddle, this.modelerStore.modeling, this.modelerStore.element, this.otherExtensionList.concat(this.bpmnElementListeners));\r\n        })\r\n        // 回传显示数量\r\n        this.$emit('getExecutionListenerCount', this.elementListenersList.length)\r\n      }\r\n      this.checkedListenerData = [];\r\n      this.listenerSystemChecked = true;\r\n      // 隐藏侧边栏\r\n      this.listenerSystemVisible = false;\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '../style/process-panel';\r\n.flow-containers  .el-badge__content.is-fixed {\r\n  top: 18px;\r\n}\r\n.dialog-footer button:first-child {\r\n  margin-right: 10px;\r\n}\r\n</style>\r\n"]}]}