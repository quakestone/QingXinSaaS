{"remainingRequest":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\viewer\\index.vue?vue&type=style&index=0&id=12613836&lang=scss","dependencies":[{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\viewer\\index.vue","mtime":1733705220403},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgIi4uL3N0eWxlL2Zsb3ctdmlld2VyLnNjc3MiOw0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA","file":"index.vue","sourceRoot":"src/components/Process/viewer","sourcesContent":["<template>\r\n  <div class=\"containers\">\r\n    <el-container style=\"align-items: stretch\">\r\n      <el-main class=\"flow-viewer\">\r\n        <div class=\"process-status\">\r\n          <span class=\"intro\">状态：</span>\r\n          <div class=\"finish\">已办理</div>\r\n          <div class=\"processing\">处理中</div>\r\n          <div class=\"todo\">未进行</div>\r\n        </div>\r\n        <!-- 流程图显示 -->\r\n        <div v-loading=\"loading\" class=\"canvas\" ref=\"flowCanvas\"></div>\r\n        <!--  按钮区域  -->\r\n        <el-button-group class=\"button-group\">\r\n          <el-tooltip effect=\"dark\" content=\"适中\" placement=\"bottom\">\r\n            <el-button size=\"small\" icon=\"el-icon-rank\" @click=\"fitViewport\" />\r\n          </el-tooltip>\r\n          <el-tooltip effect=\"dark\" content=\"放大\" placement=\"bottom\">\r\n            <el-button size=\"small\" icon=\"el-icon-zoom-in\" @click=\"zoomViewport(true)\" />\r\n          </el-tooltip>\r\n          <el-tooltip effect=\"dark\" content=\"缩小\" placement=\"bottom\">\r\n            <el-button size=\"small\" icon=\"el-icon-zoom-out\" @click=\"zoomViewport(false)\" />\r\n          </el-tooltip>\r\n        </el-button-group>\r\n      </el-main>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { CustomViewer as BpmnViewer } from \"@/components/Process/common\";\r\nexport default {\r\n  name: \"BpmnViewer\",\r\n  /** 组件传值  */\r\n  props: {\r\n    // 回显数据传值\r\n    flowData: {\r\n      type: Object,\r\n      default: () => {\r\n      },\r\n      required: false\r\n    },\r\n    procInsId: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n       bpmnViewer: null,\r\n       flowDetail: {},\r\n       loading: true,\r\n    }\r\n  },\r\n  /** 传值监听 */\r\n  watch: {\r\n    flowData: {\r\n      handler(newValue) {\r\n        if (Object.keys(newValue).length > 0) {\r\n          // 生成实例\r\n          this.bpmnViewer && this.bpmnViewer.destroy();\r\n          this.bpmnViewer = new BpmnViewer({\r\n            container: this.$refs.flowCanvas,\r\n            height: 'calc(100vh - 200px)',\r\n          });\r\n          this.loadFlowCanvas(newValue);\r\n        }\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n\r\n  },\r\n  methods: {\r\n    // 加载流程图片\r\n    async loadFlowCanvas(flowData) {\r\n      try {\r\n        await this.bpmnViewer.importXML(flowData.xmlData);\r\n        await this.fitViewport();\r\n        // 流程线高亮设置\r\n        if (flowData.nodeData !== undefined && flowData.nodeData.length > 0 && this.procInsId) {\r\n          await this.fillColor(flowData.nodeData);\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message, err.warnings)\r\n      }\r\n    },\r\n\r\n    // 让图能自适应屏幕\r\n    fitViewport() {\r\n      this.zoom = this.bpmnViewer.get('canvas').zoom(\"fit-viewport\", \"auto\");\r\n      this.loading = false;\r\n    },\r\n\r\n    // 放大缩小\r\n    zoomViewport(zoomIn = true) {\r\n      this.zoom = this.bpmnViewer.get('canvas').zoom()\r\n      this.zoom += (zoomIn ? 0.1 : -0.1)\r\n      if (this.zoom >= 0.2) this.bpmnViewer.get('canvas').zoom(this.zoom);\r\n    },\r\n\r\n    // 设置高亮颜色的\r\n    fillColor(nodeData) {\r\n      const canvas = this.bpmnViewer.get('canvas')\r\n      this.bpmnViewer.getDefinitions().rootElements[0].flowElements.forEach(n => {\r\n        const completeTask = nodeData.find(m => m.key === n.id)\r\n        const todoTask = nodeData.find(m => !m.completed)\r\n        const endTask = nodeData[nodeData.length - 1]\r\n        if (n.$type === 'bpmn:UserTask') {\r\n          if (completeTask) {\r\n            canvas.addMarker(n.id, completeTask.completed ? 'highlight' : 'highlight-todo')\r\n            n.outgoing?.forEach(nn => {\r\n              const targetTask = nodeData.find(m => m.key === nn.targetRef.id)\r\n              if (targetTask) {\r\n                if (todoTask && completeTask.key === todoTask.key && !todoTask.completed) {\r\n                  canvas.addMarker(nn.id, todoTask.completed ? 'highlight' : 'highlight-todo')\r\n                  canvas.addMarker(nn.targetRef.id, todoTask.completed ? 'highlight' : 'highlight-todo')\r\n                } else {\r\n                  canvas.addMarker(nn.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n                  canvas.addMarker(nn.targetRef.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n                }\r\n              }\r\n            })\r\n          }\r\n        }\r\n        // 排他网关\r\n        else if (n.$type === 'bpmn:ExclusiveGateway') {\r\n          if (completeTask) {\r\n            canvas.addMarker(n.id, completeTask.completed ? 'highlight' : 'highlight-todo')\r\n            n.outgoing?.forEach(nn => {\r\n              const targetTask = nodeData.find(m => m.key === nn.targetRef.id)\r\n              if (targetTask) {\r\n\r\n                canvas.addMarker(nn.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n                canvas.addMarker(nn.targetRef.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n              }\r\n            })\r\n          }\r\n        }\r\n        // 并行网关\r\n        else if (n.$type === 'bpmn:ParallelGateway') {\r\n          if (completeTask) {\r\n            canvas.addMarker(n.id, completeTask.completed ? 'highlight' : 'highlight-todo')\r\n            n.outgoing?.forEach(nn => {\r\n              const targetTask = nodeData.find(m => m.key === nn.targetRef.id)\r\n              if (targetTask) {\r\n                canvas.addMarker(nn.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n                canvas.addMarker(nn.targetRef.id, targetTask.completed ? 'highlight' : 'highlight-todo')\r\n              }\r\n            })\r\n          }\r\n        } else if (n.$type === 'bpmn:StartEvent') {\r\n          n.outgoing.forEach(nn => {\r\n            const completeTask = nodeData.find(m => m.key === nn.targetRef.id)\r\n            if (completeTask) {\r\n              canvas.addMarker(nn.id, 'highlight')\r\n              canvas.addMarker(n.id, 'highlight')\r\n              return;\r\n            }\r\n          })\r\n        } else if (n.$type === 'bpmn:EndEvent') {\r\n          if (endTask.key === n.id && endTask.completed) {\r\n            canvas.addMarker(n.id, 'highlight')\r\n            return;\r\n          }\r\n        }\r\n      })\r\n    }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../style/flow-viewer.scss\";\r\n</style>\r\n"]}]}