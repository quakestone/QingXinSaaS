{"remainingRequest":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\panel\\multiInstance.vue?vue&type=style&index=0&id=5fd41d03&lang=scss","dependencies":[{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\src\\components\\Process\\panel\\multiInstance.vue","mtime":1733705220398},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\chenxi\\Desktop\\pro\\QingXinSaaS\\qingxinsaas-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAnLi4vc3R5bGUvcHJvY2Vzcy1wYW5lbCc7DQo="},{"version":3,"sources":["multiInstance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA","file":"multiInstance.vue","sourceRoot":"src/components/Process/panel","sourcesContent":["<template>\r\n  <div class=\"panel-tab__content\">\r\n    <el-form label-width=\"70px\" @submit.native.prevent size=\"small\">\r\n      <el-form-item label=\"参数说明\">\r\n        <el-button size=\"small\" type=\"primary\" @click=\"dialogVisible = true\">查看</el-button>\r\n      </el-form-item>\r\n      <el-form-item label=\"回路特性\">\r\n        <el-select v-model=\"loopCharacteristics\" @change=\"changeLoopCharacteristicsType\">\r\n          <!--bpmn:MultiInstanceLoopCharacteristics-->\r\n          <el-option label=\"并行多重事件\" value=\"ParallelMultiInstance\" />\r\n          <el-option label=\"时序多重事件\" value=\"SequentialMultiInstance\" />\r\n          <!--bpmn:StandardLoopCharacteristics-->\r\n          <el-option label=\"循环事件\" value=\"StandardLoop\" />\r\n          <el-option label=\"无\" value=\"Null\" />\r\n        </el-select>\r\n      </el-form-item>\r\n      <template v-if=\"loopCharacteristics === 'ParallelMultiInstance' || loopCharacteristics === 'SequentialMultiInstance'\">\r\n        <el-form-item label=\"循环基数\" key=\"loopCardinality\">\r\n          <el-input v-model=\"loopInstanceForm.loopCardinality\" clearable @change=\"updateLoopCardinality\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"集合\" key=\"collection\">\r\n          <el-input v-model=\"loopInstanceForm.collection\" clearable @change=\"updateLoopBase\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"元素变量\" key=\"elementVariable\">\r\n          <el-input v-model=\"loopInstanceForm.elementVariable\" clearable @change=\"updateLoopBase\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"完成条件\" key=\"completionCondition\">\r\n          <el-input v-model=\"loopInstanceForm.completionCondition\" clearable @change=\"updateLoopCondition\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"异步状态\" key=\"async\">\r\n          <el-checkbox v-model=\"loopInstanceForm.asyncBefore\" label=\"异步前\" @change=\"updateLoopAsync('asyncBefore')\" />\r\n          <el-checkbox v-model=\"loopInstanceForm.asyncAfter\" label=\"异步后\" @change=\"updateLoopAsync('asyncAfter')\" />\r\n          <el-checkbox\r\n              v-model=\"loopInstanceForm.exclusive\"\r\n              v-if=\"loopInstanceForm.asyncAfter || loopInstanceForm.asyncBefore\"\r\n              label=\"排除\"\r\n              @change=\"updateLoopAsync('exclusive')\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"重试周期\" prop=\"timeCycle\" v-if=\"loopInstanceForm.asyncAfter || loopInstanceForm.asyncBefore\" key=\"timeCycle\">\r\n          <el-input v-model=\"loopInstanceForm.timeCycle\" clearable @change=\"updateLoopTimeCycle\" />\r\n        </el-form-item>\r\n      </template>\r\n    </el-form>\r\n\r\n  <!-- 参数说明 -->\r\n  <el-dialog title=\"多实例参数\" :visible.sync=\"dialogVisible\" width=\"680px\" @closed=\"$emit('close')\">\r\n    <el-descriptions :column=\"1\" border>\r\n      <el-descriptions-item label=\"使用说明\">按照BPMN2.0规范的要求，用于为每个实例创建执行的父执行，会提供下列变量:</el-descriptions-item>\r\n      <el-descriptions-item label=\"collection(集合变量)\">传入List参数, 一般为用户ID集合</el-descriptions-item>\r\n      <el-descriptions-item label=\"elementVariable(元素变量)\">List中单个参数的名称</el-descriptions-item>\r\n      <el-descriptions-item label=\"loopCardinality(基数)\">List循环次数</el-descriptions-item>\r\n      <el-descriptions-item label=\"isSequential(串并行)\">Parallel: 并行多实例，Sequential: 串行多实例</el-descriptions-item>\r\n      <el-descriptions-item label=\"completionCondition(完成条件)\">任务出口条件</el-descriptions-item>\r\n      <el-descriptions-item label=\"nrOfInstances(实例总数)\">实例总数</el-descriptions-item>\r\n      <el-descriptions-item label=\"nrOfActiveInstances(未完成数)\">当前活动的（即未完成的），实例数量。对于顺序多实例，这个值总为1</el-descriptions-item>\r\n      <el-descriptions-item label=\"nrOfCompletedInstances(已完成数)\">已完成的实例数量</el-descriptions-item>\r\n      <el-descriptions-item label=\"loopCounter\">给定实例在for-each循环中的index</el-descriptions-item>\r\n    </el-descriptions>\r\n  </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\nimport {StrUtil} from '@/utils/StrUtil'\r\n\r\n\r\nexport default {\r\n  name: \"MultiInstance\",\r\n  /** 组件传值  */\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      dialogVisible: false,\r\n      loopCharacteristics: \"\",\r\n      loopInstanceForm: {},\r\n      multiLoopInstance: {},\r\n      defaultLoopInstanceForm: {\r\n        completionCondition: \"\",\r\n        loopCardinality: \"\",\r\n        extensionElements: [],\r\n        asyncAfter: false,\r\n        asyncBefore: false,\r\n        exclusive: false\r\n      },\r\n    }\r\n  },\r\n\r\n  /** 传值监听 */\r\n  watch: {\r\n    id: {\r\n      handler(newVal) {\r\n        if (StrUtil.isNotBlank(newVal)) {\r\n          this.getElementLoop(this.modelerStore.element.businessObject);        }\r\n      },\r\n      immediate: true, // 立即生效\r\n    },\r\n  },\r\n  created() {\r\n\r\n  },\r\n  methods: {\r\n    // 方法区\r\n    getElementLoop(businessObject) {\r\n      if (!businessObject.loopCharacteristics) {\r\n        this.loopCharacteristics = \"Null\";\r\n        this.loopInstanceForm = {};\r\n        return;\r\n      }\r\n      if (businessObject.loopCharacteristics.$type === \"bpmn:StandardLoopCharacteristics\") {\r\n        this.loopCharacteristics = \"StandardLoop\";\r\n        this.loopInstanceForm = {};\r\n        return;\r\n      }\r\n      if (businessObject.loopCharacteristics.isSequential) {\r\n        this.loopCharacteristics = \"SequentialMultiInstance\";\r\n      } else {\r\n        this.loopCharacteristics = \"ParallelMultiInstance\";\r\n      }\r\n      // 合并配置\r\n      this.loopInstanceForm = {\r\n        ...this.defaultLoopInstanceForm,\r\n        ...businessObject.loopCharacteristics,\r\n        completionCondition: businessObject.loopCharacteristics?.completionCondition?.body ?? \"\",\r\n        loopCardinality: businessObject.loopCharacteristics?.loopCardinality?.body ?? \"\"\r\n      };\r\n      // 保留当前元素 businessObject 上的 loopCharacteristics 实例\r\n      this.multiLoopInstance = this.modelerStore.element.businessObject.loopCharacteristics;\r\n      // 更新表单\r\n      if (\r\n        businessObject.loopCharacteristics.extensionElements &&\r\n        businessObject.loopCharacteristics.extensionElements.values &&\r\n        businessObject.loopCharacteristics.extensionElements.values.length\r\n      ) {\r\n        this.$set(this.loopInstanceForm, \"timeCycle\", businessObject.loopCharacteristics.extensionElements.values[0].body);\r\n      }\r\n    },\r\n\r\n    changeLoopCharacteristicsType(type) {\r\n      // 切换类型取消原表单配置\r\n      this.loopInstanceForm = {...this.defaultLoopInstanceForm};\r\n      // 取消多实例配置\r\n      if (type === \"Null\") {\r\n        this.modelerStore.modeling.updateProperties(this.modelerStore.element, {loopCharacteristics: null});\r\n        return;\r\n      }\r\n      // 配置循环\r\n      if (type === \"StandardLoop\") {\r\n        const loopCharacteristicsObject = this.modelerStore.moddle.create(\"bpmn:StandardLoopCharacteristics\");\r\n        this.modelerStore.modeling.updateProperties(this.modelerStore.element, {\r\n          loopCharacteristics: loopCharacteristicsObject\r\n        });\r\n        this.multiLoopInstance = null;\r\n        return;\r\n      }\r\n      // 时序\r\n      if (type === \"SequentialMultiInstance\") {\r\n        this.multiLoopInstance = this.modelerStore.moddle.create(\"bpmn:MultiInstanceLoopCharacteristics\", {\r\n          isSequential: true\r\n        });\r\n      } else {\r\n        this.multiLoopInstance = this.modelerStore.moddle.create(\"bpmn:MultiInstanceLoopCharacteristics\");\r\n      }\r\n      this.modelerStore.modeling.updateProperties(this.modelerStore.element, {\r\n        loopCharacteristics: this.multiLoopInstance\r\n      });\r\n    },\r\n\r\n    // 循环基数\r\n    updateLoopCardinality(cardinality) {\r\n      let loopCardinality = null;\r\n      if (cardinality && cardinality.length) {\r\n        loopCardinality = this.modelerStore.moddle.create(\"bpmn:FormalExpression\", {body: cardinality});\r\n      }\r\n      this.modelerStore.modeling.updateModdleProperties(this.modelerStore.element, this.multiLoopInstance, {\r\n        loopCardinality\r\n      });\r\n    },\r\n\r\n    // 完成条件\r\n    updateLoopCondition(condition) {\r\n      let completionCondition = null;\r\n      if (condition && condition.length) {\r\n        completionCondition = this.modelerStore.moddle.create(\"bpmn:FormalExpression\", {body: condition});\r\n      }\r\n      this.modelerStore.modeling.updateModdleProperties(this.modelerStore.element, this.multiLoopInstance, {\r\n        completionCondition\r\n      });\r\n    },\r\n\r\n    // 重试周期\r\n    updateLoopTimeCycle(timeCycle) {\r\n      const extensionElements = this.modelerStore.moddle.create(\"bpmn:ExtensionElements\", {\r\n        values: [\r\n          this.modelerStore.moddle.create(`flowable:FailedJobRetryTimeCycle`, {\r\n            body: timeCycle\r\n          })\r\n        ]\r\n      });\r\n      this.modelerStore.modeling.updateModdleProperties(this.modelerStore.element, this.multiLoopInstance, {\r\n        extensionElements\r\n      });\r\n    },\r\n\r\n    // 直接更新的基础信息\r\n    updateLoopBase() {\r\n      this.modelerStore.modeling.updateModdleProperties(this.modelerStore.element, this.multiLoopInstance, {\r\n        collection: this.loopInstanceForm.collection || null,\r\n        elementVariable: this.loopInstanceForm.elementVariable || null\r\n      });\r\n    },\r\n\r\n    // 各异步状态\r\n    updateLoopAsync(key) {\r\n      const {asyncBefore, asyncAfter} = this.loopInstanceForm;\r\n      let asyncAttr = Object.create(null);\r\n      if (!asyncBefore && !asyncAfter) {\r\n        this.$set(this.loopInstanceForm, \"exclusive\", false);\r\n        asyncAttr = {asyncBefore: false, asyncAfter: false, exclusive: false, extensionElements: null};\r\n      } else {\r\n        asyncAttr[key] = this.loopInstanceForm[key];\r\n      }\r\n      this.modelerStore.modeling.updateModdleProperties(this.modelerStore.element, this.multiLoopInstance, asyncAttr);\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n<style lang=\"scss\">\r\n@import '../style/process-panel';\r\n</style>\r\n\r\n"]}]}